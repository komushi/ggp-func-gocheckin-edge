import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { IoTDataPlaneServiceException as __BaseException } from "./IoTDataPlaneServiceException";

export declare class ConflictException extends __BaseException {
    readonly name: "ConflictException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}

export interface DeleteThingShadowRequest {
    
    thingName: string | undefined;
    
    shadowName?: string;
}
export declare namespace DeleteThingShadowRequest {
    
    const filterSensitiveLog: (obj: DeleteThingShadowRequest) => any;
}

export interface DeleteThingShadowResponse {
    
    payload: Uint8Array | undefined;
}
export declare namespace DeleteThingShadowResponse {
    
    const filterSensitiveLog: (obj: DeleteThingShadowResponse) => any;
}

export declare class InternalFailureException extends __BaseException {
    readonly name: "InternalFailureException";
    readonly $fault: "server";
    
    constructor(opts: __ExceptionOptionType<InternalFailureException, __BaseException>);
}

export declare class InvalidRequestException extends __BaseException {
    readonly name: "InvalidRequestException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidRequestException, __BaseException>);
}

export declare class MethodNotAllowedException extends __BaseException {
    readonly name: "MethodNotAllowedException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<MethodNotAllowedException, __BaseException>);
}

export declare class ResourceNotFoundException extends __BaseException {
    readonly name: "ResourceNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
}

export declare class ServiceUnavailableException extends __BaseException {
    readonly name: "ServiceUnavailableException";
    readonly $fault: "server";
    
    constructor(opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>);
}

export declare class ThrottlingException extends __BaseException {
    readonly name: "ThrottlingException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
}

export declare class UnauthorizedException extends __BaseException {
    readonly name: "UnauthorizedException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UnauthorizedException, __BaseException>);
}

export declare class UnsupportedDocumentEncodingException extends __BaseException {
    readonly name: "UnsupportedDocumentEncodingException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<UnsupportedDocumentEncodingException, __BaseException>);
}

export interface GetRetainedMessageRequest {
    
    topic: string | undefined;
}
export declare namespace GetRetainedMessageRequest {
    
    const filterSensitiveLog: (obj: GetRetainedMessageRequest) => any;
}

export interface GetRetainedMessageResponse {
    
    topic?: string;
    
    payload?: Uint8Array;
    
    qos?: number;
    
    lastModifiedTime?: number;
}
export declare namespace GetRetainedMessageResponse {
    
    const filterSensitiveLog: (obj: GetRetainedMessageResponse) => any;
}

export interface GetThingShadowRequest {
    
    thingName: string | undefined;
    
    shadowName?: string;
}
export declare namespace GetThingShadowRequest {
    
    const filterSensitiveLog: (obj: GetThingShadowRequest) => any;
}

export interface GetThingShadowResponse {
    
    payload?: Uint8Array;
}
export declare namespace GetThingShadowResponse {
    
    const filterSensitiveLog: (obj: GetThingShadowResponse) => any;
}
export interface ListNamedShadowsForThingRequest {
    
    thingName: string | undefined;
    
    nextToken?: string;
    
    pageSize?: number;
}
export declare namespace ListNamedShadowsForThingRequest {
    
    const filterSensitiveLog: (obj: ListNamedShadowsForThingRequest) => any;
}
export interface ListNamedShadowsForThingResponse {
    
    results?: string[];
    
    nextToken?: string;
    
    timestamp?: number;
}
export declare namespace ListNamedShadowsForThingResponse {
    
    const filterSensitiveLog: (obj: ListNamedShadowsForThingResponse) => any;
}
export interface ListRetainedMessagesRequest {
    
    nextToken?: string;
    
    maxResults?: number;
}
export declare namespace ListRetainedMessagesRequest {
    
    const filterSensitiveLog: (obj: ListRetainedMessagesRequest) => any;
}

export interface RetainedMessageSummary {
    
    topic?: string;
    
    payloadSize?: number;
    
    qos?: number;
    
    lastModifiedTime?: number;
}
export declare namespace RetainedMessageSummary {
    
    const filterSensitiveLog: (obj: RetainedMessageSummary) => any;
}
export interface ListRetainedMessagesResponse {
    
    retainedTopics?: RetainedMessageSummary[];
    
    nextToken?: string;
}
export declare namespace ListRetainedMessagesResponse {
    
    const filterSensitiveLog: (obj: ListRetainedMessagesResponse) => any;
}

export interface PublishRequest {
    
    topic: string | undefined;
    
    qos?: number;
    
    retain?: boolean;
    
    payload?: Uint8Array;
}
export declare namespace PublishRequest {
    
    const filterSensitiveLog: (obj: PublishRequest) => any;
}

export declare class RequestEntityTooLargeException extends __BaseException {
    readonly name: "RequestEntityTooLargeException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<RequestEntityTooLargeException, __BaseException>);
}

export interface UpdateThingShadowRequest {
    
    thingName: string | undefined;
    
    shadowName?: string;
    
    payload: Uint8Array | undefined;
}
export declare namespace UpdateThingShadowRequest {
    
    const filterSensitiveLog: (obj: UpdateThingShadowRequest) => any;
}

export interface UpdateThingShadowResponse {
    
    payload?: Uint8Array;
}
export declare namespace UpdateThingShadowResponse {
    
    const filterSensitiveLog: (obj: UpdateThingShadowResponse) => any;
}
