"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unmarshallOutput = exports.marshallInput = void 0;
const util_dynamodb_1 = require("@aws-sdk/util-dynamodb");
const processObj = (obj, processFunc, children) => {
    if (obj) {
        if (!children || (Array.isArray(children) && children.length === 0)) {
            // Leaf of KeyNode, process the object.
            return processFunc(obj);
        }
        else {
            // Not leaf node, process the children.
            if (Array.isArray(children)) {
                // Specific keys of children need to be processed.
                return processKeysInObj(obj, processFunc, children);
            }
            else {
                // All children require processing.
                return processAllKeysInObj(obj, processFunc, children.children);
            }
        }
    }
    return undefined;
};
const processKeyInObj = (obj, processFunc, children) => {
    if (Array.isArray(obj)) {
        return obj.map((item) => processObj(item, processFunc, children));
    }
    return processObj(obj, processFunc, children);
};
const processKeysInObj = (obj, processFunc, keyNodes) => keyNodes.reduce((acc, { key, children }) => ({
    ...acc,
    [key]: processKeyInObj(acc[key], processFunc, children),
}), obj);
const processAllKeysInObj = (obj, processFunc, children) => Object.entries(obj).reduce((acc, [key, value]) => ({
    ...acc,
    [key]: processKeyInObj(value, processFunc, children),
}), {});
const marshallInput = (obj, keyNodes, options) => {
    const marshallFunc = (toMarshall) => util_dynamodb_1.marshall(toMarshall, options);
    return processKeysInObj(obj, marshallFunc, keyNodes);
};
exports.marshallInput = marshallInput;
const unmarshallOutput = (obj, keyNodes, options) => {
    const unmarshallFunc = (toMarshall) => util_dynamodb_1.unmarshall(toMarshall, options);
    return processKeysInObj(obj, unmarshallFunc, keyNodes);
};
exports.unmarshallOutput = unmarshallOutput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQWtHO0FBV2xHLE1BQU0sVUFBVSxHQUFHLENBQUMsR0FBUSxFQUFFLFdBQXFCLEVBQUUsUUFBK0IsRUFBTyxFQUFFO0lBQzNGLElBQUksR0FBRyxFQUFFO1FBQ1AsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNuRSx1Q0FBdUM7WUFDdkMsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDekI7YUFBTTtZQUNMLHVDQUF1QztZQUN2QyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQzNCLGtEQUFrRDtnQkFDbEQsT0FBTyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO2FBQ3JEO2lCQUFNO2dCQUNMLG1DQUFtQztnQkFDbkMsT0FBTyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNqRTtTQUNGO0tBQ0Y7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUM7QUFFRixNQUFNLGVBQWUsR0FBRyxDQUFDLEdBQVEsRUFBRSxXQUFxQixFQUFFLFFBQStCLEVBQU8sRUFBRTtJQUNoRyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDdEIsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0tBQ3hFO0lBQ0QsT0FBTyxVQUFVLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNoRCxDQUFDLENBQUM7QUFFRixNQUFNLGdCQUFnQixHQUFHLENBQUMsR0FBUSxFQUFFLFdBQXFCLEVBQUUsUUFBbUIsRUFBRSxFQUFFLENBQ2hGLFFBQVEsQ0FBQyxNQUFNLENBQ2IsQ0FBQyxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDM0IsR0FBRyxHQUFHO0lBQ04sQ0FBQyxHQUFHLENBQUMsRUFBRSxlQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUM7Q0FDeEQsQ0FBQyxFQUNGLEdBQUcsQ0FDSixDQUFDO0FBRUosTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEdBQVEsRUFBRSxXQUFxQixFQUFFLFFBQStCLEVBQU8sRUFBRSxDQUNwRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FDeEIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdEIsR0FBRyxHQUFHO0lBQ04sQ0FBQyxHQUFHLENBQUMsRUFBRSxlQUFlLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUM7Q0FDckQsQ0FBQyxFQUNGLEVBQUUsQ0FDSCxDQUFDO0FBRUcsTUFBTSxhQUFhLEdBQUcsQ0FBQyxHQUFRLEVBQUUsUUFBbUIsRUFBRSxPQUF5QixFQUFFLEVBQUU7SUFDeEYsTUFBTSxZQUFZLEdBQUcsQ0FBQyxVQUFlLEVBQUUsRUFBRSxDQUFDLHdCQUFRLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3hFLE9BQU8sZ0JBQWdCLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN2RCxDQUFDLENBQUM7QUFIVyxRQUFBLGFBQWEsaUJBR3hCO0FBRUssTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEdBQVEsRUFBRSxRQUFtQixFQUFFLE9BQTJCLEVBQUUsRUFBRTtJQUM3RixNQUFNLGNBQWMsR0FBRyxDQUFDLFVBQWUsRUFBRSxFQUFFLENBQUMsMEJBQVUsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDNUUsT0FBTyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3pELENBQUMsQ0FBQztBQUhXLFFBQUEsZ0JBQWdCLG9CQUczQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hcnNoYWxsLCBtYXJzaGFsbE9wdGlvbnMsIHVubWFyc2hhbGwsIHVubWFyc2hhbGxPcHRpb25zIH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtZHluYW1vZGJcIjtcblxuZXhwb3J0IHR5cGUgS2V5Tm9kZSA9IHtcbiAga2V5OiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogS2V5Tm9kZVtdIHwgQWxsTm9kZXM7XG59O1xuXG5leHBvcnQgdHlwZSBBbGxOb2RlcyA9IHtcbiAgY2hpbGRyZW4/OiBLZXlOb2RlW10gfCBBbGxOb2Rlcztcbn07XG5cbmNvbnN0IHByb2Nlc3NPYmogPSAob2JqOiBhbnksIHByb2Nlc3NGdW5jOiBGdW5jdGlvbiwgY2hpbGRyZW4/OiBLZXlOb2RlW10gfCBBbGxOb2Rlcyk6IGFueSA9PiB7XG4gIGlmIChvYmopIHtcbiAgICBpZiAoIWNoaWxkcmVuIHx8IChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDApKSB7XG4gICAgICAvLyBMZWFmIG9mIEtleU5vZGUsIHByb2Nlc3MgdGhlIG9iamVjdC5cbiAgICAgIHJldHVybiBwcm9jZXNzRnVuYyhvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOb3QgbGVhZiBub2RlLCBwcm9jZXNzIHRoZSBjaGlsZHJlbi5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgICAvLyBTcGVjaWZpYyBrZXlzIG9mIGNoaWxkcmVuIG5lZWQgdG8gYmUgcHJvY2Vzc2VkLlxuICAgICAgICByZXR1cm4gcHJvY2Vzc0tleXNJbk9iaihvYmosIHByb2Nlc3NGdW5jLCBjaGlsZHJlbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBbGwgY2hpbGRyZW4gcmVxdWlyZSBwcm9jZXNzaW5nLlxuICAgICAgICByZXR1cm4gcHJvY2Vzc0FsbEtleXNJbk9iaihvYmosIHByb2Nlc3NGdW5jLCBjaGlsZHJlbi5jaGlsZHJlbik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5jb25zdCBwcm9jZXNzS2V5SW5PYmogPSAob2JqOiBhbnksIHByb2Nlc3NGdW5jOiBGdW5jdGlvbiwgY2hpbGRyZW4/OiBLZXlOb2RlW10gfCBBbGxOb2Rlcyk6IGFueSA9PiB7XG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICByZXR1cm4gb2JqLm1hcCgoaXRlbTogYW55KSA9PiBwcm9jZXNzT2JqKGl0ZW0sIHByb2Nlc3NGdW5jLCBjaGlsZHJlbikpO1xuICB9XG4gIHJldHVybiBwcm9jZXNzT2JqKG9iaiwgcHJvY2Vzc0Z1bmMsIGNoaWxkcmVuKTtcbn07XG5cbmNvbnN0IHByb2Nlc3NLZXlzSW5PYmogPSAob2JqOiBhbnksIHByb2Nlc3NGdW5jOiBGdW5jdGlvbiwga2V5Tm9kZXM6IEtleU5vZGVbXSkgPT5cbiAga2V5Tm9kZXMucmVkdWNlKFxuICAgIChhY2MsIHsga2V5LCBjaGlsZHJlbiB9KSA9PiAoe1xuICAgICAgLi4uYWNjLFxuICAgICAgW2tleV06IHByb2Nlc3NLZXlJbk9iaihhY2Nba2V5XSwgcHJvY2Vzc0Z1bmMsIGNoaWxkcmVuKSxcbiAgICB9KSxcbiAgICBvYmpcbiAgKTtcblxuY29uc3QgcHJvY2Vzc0FsbEtleXNJbk9iaiA9IChvYmo6IGFueSwgcHJvY2Vzc0Z1bmM6IEZ1bmN0aW9uLCBjaGlsZHJlbj86IEtleU5vZGVbXSB8IEFsbE5vZGVzKTogYW55ID0+XG4gIE9iamVjdC5lbnRyaWVzKG9iaikucmVkdWNlKFxuICAgIChhY2MsIFtrZXksIHZhbHVlXSkgPT4gKHtcbiAgICAgIC4uLmFjYyxcbiAgICAgIFtrZXldOiBwcm9jZXNzS2V5SW5PYmoodmFsdWUsIHByb2Nlc3NGdW5jLCBjaGlsZHJlbiksXG4gICAgfSksXG4gICAge31cbiAgKTtcblxuZXhwb3J0IGNvbnN0IG1hcnNoYWxsSW5wdXQgPSAob2JqOiBhbnksIGtleU5vZGVzOiBLZXlOb2RlW10sIG9wdGlvbnM/OiBtYXJzaGFsbE9wdGlvbnMpID0+IHtcbiAgY29uc3QgbWFyc2hhbGxGdW5jID0gKHRvTWFyc2hhbGw6IGFueSkgPT4gbWFyc2hhbGwodG9NYXJzaGFsbCwgb3B0aW9ucyk7XG4gIHJldHVybiBwcm9jZXNzS2V5c0luT2JqKG9iaiwgbWFyc2hhbGxGdW5jLCBrZXlOb2Rlcyk7XG59O1xuXG5leHBvcnQgY29uc3QgdW5tYXJzaGFsbE91dHB1dCA9IChvYmo6IGFueSwga2V5Tm9kZXM6IEtleU5vZGVbXSwgb3B0aW9ucz86IHVubWFyc2hhbGxPcHRpb25zKSA9PiB7XG4gIGNvbnN0IHVubWFyc2hhbGxGdW5jID0gKHRvTWFyc2hhbGw6IGFueSkgPT4gdW5tYXJzaGFsbCh0b01hcnNoYWxsLCBvcHRpb25zKTtcbiAgcmV0dXJuIHByb2Nlc3NLZXlzSW5PYmoob2JqLCB1bm1hcnNoYWxsRnVuYywga2V5Tm9kZXMpO1xufTtcbiJdfQ==