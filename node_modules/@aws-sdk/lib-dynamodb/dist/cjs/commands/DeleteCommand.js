"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteCommand = void 0;
const utils_1 = require("../commands/utils");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const smithy_client_1 = require("@aws-sdk/smithy-client");
/**
 * Accepts native JavaScript types instead of `AttributeValue`s, and calls
 * DeleteItemCommand operation from {@link https://www.npmjs.com/package/@aws-sdk/client-dynamodb @aws-sdk/client-dynamodb}.
 *
 * JavaScript objects passed in as parameters are marshalled into `AttributeValue` shapes
 * required by Amazon DynamoDB. Responses from DynamoDB are unmarshalled into plain JavaScript objects.
 */
class DeleteCommand extends smithy_client_1.Command {
    constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
            { key: "Key" },
            {
                key: "Expected",
                children: {
                    children: [{ key: "Value" }, { key: "AttributeValueList" }],
                },
            },
            { key: "ExpressionAttributeValues" },
        ];
        this.outputKeyNodes = [
            { key: "Attributes" },
            { key: "ItemCollectionMetrics", children: [{ key: "ItemCollectionKey" }] },
        ];
    }
    /**
     * @internal
     */
    resolveMiddleware(clientStack, configuration, options) {
        const { marshallOptions, unmarshallOptions } = configuration.translateConfig || {};
        const command = new client_dynamodb_1.DeleteItemCommand(utils_1.marshallInput(this.input, this.inputKeyNodes, marshallOptions));
        const handler = command.resolveMiddleware(clientStack, configuration, options);
        return async () => {
            const data = await handler(command);
            return {
                ...data,
                output: utils_1.unmarshallOutput(data.output, this.outputKeyNodes, unmarshallOptions),
            };
        };
    }
}
exports.DeleteCommand = DeleteCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVsZXRlQ29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9EZWxldGVDb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDZDQUFvRTtBQUNwRSw4REFNa0M7QUFDbEMsMERBQTZEO0FBc0I3RDs7Ozs7O0dBTUc7QUFDSCxNQUFhLGFBQWMsU0FBUSx1QkFJbEM7SUFnQkMsWUFBcUIsS0FBeUI7UUFDNUMsS0FBSyxFQUFFLENBQUM7UUFEVyxVQUFLLEdBQUwsS0FBSyxDQUFvQjtRQWY3QixrQkFBYSxHQUFHO1lBQy9CLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRTtZQUNkO2dCQUNFLEdBQUcsRUFBRSxVQUFVO2dCQUNmLFFBQVEsRUFBRTtvQkFDUixRQUFRLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxDQUFDO2lCQUM1RDthQUNGO1lBQ0QsRUFBRSxHQUFHLEVBQUUsMkJBQTJCLEVBQUU7U0FDckMsQ0FBQztRQUNlLG1CQUFjLEdBQUc7WUFDaEMsRUFBRSxHQUFHLEVBQUUsWUFBWSxFQUFFO1lBQ3JCLEVBQUUsR0FBRyxFQUFFLHVCQUF1QixFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLG1CQUFtQixFQUFFLENBQUMsRUFBRTtTQUMzRSxDQUFDO0lBSUYsQ0FBQztJQUVEOztPQUVHO0lBQ0gsaUJBQWlCLENBQ2YsV0FBbUUsRUFDbkUsYUFBbUQsRUFDbkQsT0FBOEI7UUFFOUIsTUFBTSxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxHQUFHLGFBQWEsQ0FBQyxlQUFlLElBQUksRUFBRSxDQUFDO1FBQ25GLE1BQU0sT0FBTyxHQUFHLElBQUksbUNBQW1CLENBQUMscUJBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUN4RyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUUvRSxPQUFPLEtBQUssSUFBSSxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxHQUFHLE1BQU0sT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3BDLE9BQU87Z0JBQ0wsR0FBRyxJQUFJO2dCQUNQLE1BQU0sRUFBRSx3QkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsaUJBQWlCLENBQUM7YUFDOUUsQ0FBQztRQUNKLENBQUMsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQTVDRCxzQ0E0Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbW9EQkRvY3VtZW50Q2xpZW50UmVzb2x2ZWRDb25maWcsIFNlcnZpY2VJbnB1dFR5cGVzLCBTZXJ2aWNlT3V0cHV0VHlwZXMgfSBmcm9tIFwiLi4vRHluYW1vREJEb2N1bWVudENsaWVudFwiO1xuaW1wb3J0IHsgbWFyc2hhbGxJbnB1dCwgdW5tYXJzaGFsbE91dHB1dCB9IGZyb20gXCIuLi9jb21tYW5kcy91dGlsc1wiO1xuaW1wb3J0IHtcbiAgRXhwZWN0ZWRBdHRyaWJ1dGVWYWx1ZSxcbiAgSXRlbUNvbGxlY3Rpb25NZXRyaWNzLFxuICBEZWxldGVJdGVtQ29tbWFuZCBhcyBfX0RlbGV0ZUl0ZW1Db21tYW5kLFxuICBEZWxldGVJdGVtQ29tbWFuZElucHV0IGFzIF9fRGVsZXRlSXRlbUNvbW1hbmRJbnB1dCxcbiAgRGVsZXRlSXRlbUNvbW1hbmRPdXRwdXQgYXMgX19EZWxldGVJdGVtQ29tbWFuZE91dHB1dCxcbn0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1keW5hbW9kYlwiO1xuaW1wb3J0IHsgQ29tbWFuZCBhcyAkQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBIYW5kbGVyLCBNaWRkbGV3YXJlU3RhY2ssIEh0dHBIYW5kbGVyT3B0aW9ucyBhcyBfX0h0dHBIYW5kbGVyT3B0aW9ucyB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgTmF0aXZlQXR0cmlidXRlVmFsdWUgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1keW5hbW9kYlwiO1xuXG5leHBvcnQgdHlwZSBEZWxldGVDb21tYW5kSW5wdXQgPSBPbWl0PF9fRGVsZXRlSXRlbUNvbW1hbmRJbnB1dCwgXCJLZXlcIiB8IFwiRXhwZWN0ZWRcIiB8IFwiRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1wiPiAmIHtcbiAgS2V5OiB7IFtrZXk6IHN0cmluZ106IE5hdGl2ZUF0dHJpYnV0ZVZhbHVlIH0gfCB1bmRlZmluZWQ7XG4gIEV4cGVjdGVkPzoge1xuICAgIFtrZXk6IHN0cmluZ106IE9taXQ8RXhwZWN0ZWRBdHRyaWJ1dGVWYWx1ZSwgXCJWYWx1ZVwiIHwgXCJBdHRyaWJ1dGVWYWx1ZUxpc3RcIj4gJiB7XG4gICAgICBWYWx1ZT86IE5hdGl2ZUF0dHJpYnV0ZVZhbHVlO1xuICAgICAgQXR0cmlidXRlVmFsdWVMaXN0PzogTmF0aXZlQXR0cmlidXRlVmFsdWVbXTtcbiAgICB9O1xuICB9O1xuICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzPzogeyBba2V5OiBzdHJpbmddOiBOYXRpdmVBdHRyaWJ1dGVWYWx1ZSB9O1xufTtcblxuZXhwb3J0IHR5cGUgRGVsZXRlQ29tbWFuZE91dHB1dCA9IE9taXQ8X19EZWxldGVJdGVtQ29tbWFuZE91dHB1dCwgXCJBdHRyaWJ1dGVzXCIgfCBcIkl0ZW1Db2xsZWN0aW9uTWV0cmljc1wiPiAmIHtcbiAgQXR0cmlidXRlcz86IHsgW2tleTogc3RyaW5nXTogTmF0aXZlQXR0cmlidXRlVmFsdWUgfTtcbiAgSXRlbUNvbGxlY3Rpb25NZXRyaWNzPzogT21pdDxJdGVtQ29sbGVjdGlvbk1ldHJpY3MsIFwiSXRlbUNvbGxlY3Rpb25LZXlcIj4gJiB7XG4gICAgSXRlbUNvbGxlY3Rpb25LZXk/OiB7IFtrZXk6IHN0cmluZ106IE5hdGl2ZUF0dHJpYnV0ZVZhbHVlIH07XG4gIH07XG59O1xuXG4vKipcbiAqIEFjY2VwdHMgbmF0aXZlIEphdmFTY3JpcHQgdHlwZXMgaW5zdGVhZCBvZiBgQXR0cmlidXRlVmFsdWVgcywgYW5kIGNhbGxzXG4gKiBEZWxldGVJdGVtQ29tbWFuZCBvcGVyYXRpb24gZnJvbSB7QGxpbmsgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiIEBhd3Mtc2RrL2NsaWVudC1keW5hbW9kYn0uXG4gKlxuICogSmF2YVNjcmlwdCBvYmplY3RzIHBhc3NlZCBpbiBhcyBwYXJhbWV0ZXJzIGFyZSBtYXJzaGFsbGVkIGludG8gYEF0dHJpYnV0ZVZhbHVlYCBzaGFwZXNcbiAqIHJlcXVpcmVkIGJ5IEFtYXpvbiBEeW5hbW9EQi4gUmVzcG9uc2VzIGZyb20gRHluYW1vREIgYXJlIHVubWFyc2hhbGxlZCBpbnRvIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIERlbGV0ZUNvbW1hbmQgZXh0ZW5kcyAkQ29tbWFuZDxcbiAgRGVsZXRlQ29tbWFuZElucHV0LFxuICBEZWxldGVDb21tYW5kT3V0cHV0LFxuICBEeW5hbW9EQkRvY3VtZW50Q2xpZW50UmVzb2x2ZWRDb25maWdcbj4ge1xuICBwcml2YXRlIHJlYWRvbmx5IGlucHV0S2V5Tm9kZXMgPSBbXG4gICAgeyBrZXk6IFwiS2V5XCIgfSxcbiAgICB7XG4gICAgICBrZXk6IFwiRXhwZWN0ZWRcIixcbiAgICAgIGNoaWxkcmVuOiB7XG4gICAgICAgIGNoaWxkcmVuOiBbeyBrZXk6IFwiVmFsdWVcIiB9LCB7IGtleTogXCJBdHRyaWJ1dGVWYWx1ZUxpc3RcIiB9XSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7IGtleTogXCJFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzXCIgfSxcbiAgXTtcbiAgcHJpdmF0ZSByZWFkb25seSBvdXRwdXRLZXlOb2RlcyA9IFtcbiAgICB7IGtleTogXCJBdHRyaWJ1dGVzXCIgfSxcbiAgICB7IGtleTogXCJJdGVtQ29sbGVjdGlvbk1ldHJpY3NcIiwgY2hpbGRyZW46IFt7IGtleTogXCJJdGVtQ29sbGVjdGlvbktleVwiIH1dIH0sXG4gIF07XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgaW5wdXQ6IERlbGV0ZUNvbW1hbmRJbnB1dCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICByZXNvbHZlTWlkZGxld2FyZShcbiAgICBjbGllbnRTdGFjazogTWlkZGxld2FyZVN0YWNrPFNlcnZpY2VJbnB1dFR5cGVzLCBTZXJ2aWNlT3V0cHV0VHlwZXM+LFxuICAgIGNvbmZpZ3VyYXRpb246IER5bmFtb0RCRG9jdW1lbnRDbGllbnRSZXNvbHZlZENvbmZpZyxcbiAgICBvcHRpb25zPzogX19IdHRwSGFuZGxlck9wdGlvbnNcbiAgKTogSGFuZGxlcjxEZWxldGVDb21tYW5kSW5wdXQsIERlbGV0ZUNvbW1hbmRPdXRwdXQ+IHtcbiAgICBjb25zdCB7IG1hcnNoYWxsT3B0aW9ucywgdW5tYXJzaGFsbE9wdGlvbnMgfSA9IGNvbmZpZ3VyYXRpb24udHJhbnNsYXRlQ29uZmlnIHx8IHt9O1xuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgX19EZWxldGVJdGVtQ29tbWFuZChtYXJzaGFsbElucHV0KHRoaXMuaW5wdXQsIHRoaXMuaW5wdXRLZXlOb2RlcywgbWFyc2hhbGxPcHRpb25zKSk7XG4gICAgY29uc3QgaGFuZGxlciA9IGNvbW1hbmQucmVzb2x2ZU1pZGRsZXdhcmUoY2xpZW50U3RhY2ssIGNvbmZpZ3VyYXRpb24sIG9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBoYW5kbGVyKGNvbW1hbmQpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgb3V0cHV0OiB1bm1hcnNoYWxsT3V0cHV0KGRhdGEub3V0cHV0LCB0aGlzLm91dHB1dEtleU5vZGVzLCB1bm1hcnNoYWxsT3B0aW9ucyksXG4gICAgICB9O1xuICAgIH07XG4gIH1cbn1cbiJdfQ==