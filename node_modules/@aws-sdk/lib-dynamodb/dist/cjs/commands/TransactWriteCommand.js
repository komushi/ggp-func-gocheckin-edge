"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactWriteCommand = void 0;
const utils_1 = require("../commands/utils");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const smithy_client_1 = require("@aws-sdk/smithy-client");
/**
 * Accepts native JavaScript types instead of `AttributeValue`s, and calls
 * TransactWriteItemsCommand operation from {@link https://www.npmjs.com/package/@aws-sdk/client-dynamodb @aws-sdk/client-dynamodb}.
 *
 * JavaScript objects passed in as parameters are marshalled into `AttributeValue` shapes
 * required by Amazon DynamoDB. Responses from DynamoDB are unmarshalled into plain JavaScript objects.
 */
class TransactWriteCommand extends smithy_client_1.Command {
    constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
            {
                key: "TransactItems",
                children: [
                    { key: "ConditionCheck", children: [{ key: "Key" }, { key: "ExpressionAttributeValues" }] },
                    { key: "Put", children: [{ key: "Item" }, { key: "ExpressionAttributeValues" }] },
                    { key: "Delete", children: [{ key: "Key" }, { key: "ExpressionAttributeValues" }] },
                    { key: "Update", children: [{ key: "Key" }, { key: "ExpressionAttributeValues" }] },
                ],
            },
        ];
        this.outputKeyNodes = [
            {
                key: "ItemCollectionMetrics",
                children: {
                    children: [{ key: "ItemCollectionKey" }],
                },
            },
        ];
    }
    /**
     * @internal
     */
    resolveMiddleware(clientStack, configuration, options) {
        const { marshallOptions, unmarshallOptions } = configuration.translateConfig || {};
        const command = new client_dynamodb_1.TransactWriteItemsCommand(utils_1.marshallInput(this.input, this.inputKeyNodes, marshallOptions));
        const handler = command.resolveMiddleware(clientStack, configuration, options);
        return async () => {
            const data = await handler(command);
            return {
                ...data,
                output: utils_1.unmarshallOutput(data.output, this.outputKeyNodes, unmarshallOptions),
            };
        };
    }
}
exports.TransactWriteCommand = TransactWriteCommand;
//# sourceMappingURL=data:application/json;base64,