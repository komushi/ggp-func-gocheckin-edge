"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchExecuteStatementCommand = void 0;
const utils_1 = require("../commands/utils");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const smithy_client_1 = require("@aws-sdk/smithy-client");
/**
 * Accepts native JavaScript types instead of `AttributeValue`s, and calls
 * BatchExecuteStatementCommand operation from {@link https://www.npmjs.com/package/@aws-sdk/client-dynamodb @aws-sdk/client-dynamodb}.
 *
 * JavaScript objects passed in as parameters are marshalled into `AttributeValue` shapes
 * required by Amazon DynamoDB. Responses from DynamoDB are unmarshalled into plain JavaScript objects.
 */
class BatchExecuteStatementCommand extends smithy_client_1.Command {
    constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [{ key: "Statements", children: [{ key: "Parameters" }] }];
        this.outputKeyNodes = [{ key: "Responses", children: [{ key: "Item" }] }];
    }
    /**
     * @internal
     */
    resolveMiddleware(clientStack, configuration, options) {
        const { marshallOptions, unmarshallOptions } = configuration.translateConfig || {};
        const command = new client_dynamodb_1.BatchExecuteStatementCommand(utils_1.marshallInput(this.input, this.inputKeyNodes, marshallOptions));
        const handler = command.resolveMiddleware(clientStack, configuration, options);
        return async () => {
            const data = await handler(command);
            return {
                ...data,
                output: utils_1.unmarshallOutput(data.output, this.outputKeyNodes, unmarshallOptions),
            };
        };
    }
}
exports.BatchExecuteStatementCommand = BatchExecuteStatementCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmF0Y2hFeGVjdXRlU3RhdGVtZW50Q29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9CYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDZDQUFvRTtBQUNwRSw4REFNa0M7QUFDbEMsMERBQTZEO0FBa0I3RDs7Ozs7O0dBTUc7QUFDSCxNQUFhLDRCQUE2QixTQUFRLHVCQUlqRDtJQUlDLFlBQXFCLEtBQXdDO1FBQzNELEtBQUssRUFBRSxDQUFDO1FBRFcsVUFBSyxHQUFMLEtBQUssQ0FBbUM7UUFINUMsa0JBQWEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMzRSxtQkFBYyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBSXRGLENBQUM7SUFFRDs7T0FFRztJQUNILGlCQUFpQixDQUNmLFdBQW1FLEVBQ25FLGFBQW1ELEVBQ25ELE9BQThCO1FBRTlCLE1BQU0sRUFBRSxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsR0FBRyxhQUFhLENBQUMsZUFBZSxJQUFJLEVBQUUsQ0FBQztRQUNuRixNQUFNLE9BQU8sR0FBRyxJQUFJLDhDQUE4QixDQUFDLHFCQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUM7UUFDbkgsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFL0UsT0FBTyxLQUFLLElBQUksRUFBRTtZQUNoQixNQUFNLElBQUksR0FBRyxNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNwQyxPQUFPO2dCQUNMLEdBQUcsSUFBSTtnQkFDUCxNQUFNLEVBQUUsd0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLGlCQUFpQixDQUFDO2FBQzlFLENBQUM7UUFDSixDQUFDLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFoQ0Qsb0VBZ0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHluYW1vREJEb2N1bWVudENsaWVudFJlc29sdmVkQ29uZmlnLCBTZXJ2aWNlSW5wdXRUeXBlcywgU2VydmljZU91dHB1dFR5cGVzIH0gZnJvbSBcIi4uL0R5bmFtb0RCRG9jdW1lbnRDbGllbnRcIjtcbmltcG9ydCB7IG1hcnNoYWxsSW5wdXQsIHVubWFyc2hhbGxPdXRwdXQgfSBmcm9tIFwiLi4vY29tbWFuZHMvdXRpbHNcIjtcbmltcG9ydCB7XG4gIEJhdGNoU3RhdGVtZW50UmVxdWVzdCxcbiAgQmF0Y2hTdGF0ZW1lbnRSZXNwb25zZSxcbiAgQmF0Y2hFeGVjdXRlU3RhdGVtZW50Q29tbWFuZCBhcyBfX0JhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQsXG4gIEJhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmRJbnB1dCBhcyBfX0JhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmRJbnB1dCxcbiAgQmF0Y2hFeGVjdXRlU3RhdGVtZW50Q29tbWFuZE91dHB1dCBhcyBfX0JhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmRPdXRwdXQsXG59IGZyb20gXCJAYXdzLXNkay9jbGllbnQtZHluYW1vZGJcIjtcbmltcG9ydCB7IENvbW1hbmQgYXMgJENvbW1hbmQgfSBmcm9tIFwiQGF3cy1zZGsvc21pdGh5LWNsaWVudFwiO1xuaW1wb3J0IHsgSGFuZGxlciwgTWlkZGxld2FyZVN0YWNrLCBIdHRwSGFuZGxlck9wdGlvbnMgYXMgX19IdHRwSGFuZGxlck9wdGlvbnMgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcbmltcG9ydCB7IE5hdGl2ZUF0dHJpYnV0ZVZhbHVlIH0gZnJvbSBcIkBhd3Mtc2RrL3V0aWwtZHluYW1vZGJcIjtcblxuZXhwb3J0IHR5cGUgQmF0Y2hFeGVjdXRlU3RhdGVtZW50Q29tbWFuZElucHV0ID0gT21pdDxfX0JhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmRJbnB1dCwgXCJTdGF0ZW1lbnRzXCI+ICYge1xuICBTdGF0ZW1lbnRzOlxuICAgIHwgKE9taXQ8QmF0Y2hTdGF0ZW1lbnRSZXF1ZXN0LCBcIlBhcmFtZXRlcnNcIj4gJiB7XG4gICAgICAgIFBhcmFtZXRlcnM/OiBOYXRpdmVBdHRyaWJ1dGVWYWx1ZVtdO1xuICAgICAgfSlbXVxuICAgIHwgdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IHR5cGUgQmF0Y2hFeGVjdXRlU3RhdGVtZW50Q29tbWFuZE91dHB1dCA9IE9taXQ8X19CYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kT3V0cHV0LCBcIlJlc3BvbnNlc1wiPiAmIHtcbiAgUmVzcG9uc2VzPzogKE9taXQ8QmF0Y2hTdGF0ZW1lbnRSZXNwb25zZSwgXCJJdGVtXCI+ICYge1xuICAgIEl0ZW0/OiB7IFtrZXk6IHN0cmluZ106IE5hdGl2ZUF0dHJpYnV0ZVZhbHVlIH07XG4gIH0pW107XG59O1xuXG4vKipcbiAqIEFjY2VwdHMgbmF0aXZlIEphdmFTY3JpcHQgdHlwZXMgaW5zdGVhZCBvZiBgQXR0cmlidXRlVmFsdWVgcywgYW5kIGNhbGxzXG4gKiBCYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kIG9wZXJhdGlvbiBmcm9tIHtAbGluayBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9AYXdzLXNkay9jbGllbnQtZHluYW1vZGIgQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RifS5cbiAqXG4gKiBKYXZhU2NyaXB0IG9iamVjdHMgcGFzc2VkIGluIGFzIHBhcmFtZXRlcnMgYXJlIG1hcnNoYWxsZWQgaW50byBgQXR0cmlidXRlVmFsdWVgIHNoYXBlc1xuICogcmVxdWlyZWQgYnkgQW1hem9uIER5bmFtb0RCLiBSZXNwb25zZXMgZnJvbSBEeW5hbW9EQiBhcmUgdW5tYXJzaGFsbGVkIGludG8gcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICovXG5leHBvcnQgY2xhc3MgQmF0Y2hFeGVjdXRlU3RhdGVtZW50Q29tbWFuZCBleHRlbmRzICRDb21tYW5kPFxuICBCYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kSW5wdXQsXG4gIEJhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmRPdXRwdXQsXG4gIER5bmFtb0RCRG9jdW1lbnRDbGllbnRSZXNvbHZlZENvbmZpZ1xuPiB7XG4gIHByaXZhdGUgcmVhZG9ubHkgaW5wdXRLZXlOb2RlcyA9IFt7IGtleTogXCJTdGF0ZW1lbnRzXCIsIGNoaWxkcmVuOiBbeyBrZXk6IFwiUGFyYW1ldGVyc1wiIH1dIH1dO1xuICBwcml2YXRlIHJlYWRvbmx5IG91dHB1dEtleU5vZGVzID0gW3sga2V5OiBcIlJlc3BvbnNlc1wiLCBjaGlsZHJlbjogW3sga2V5OiBcIkl0ZW1cIiB9XSB9XTtcblxuICBjb25zdHJ1Y3RvcihyZWFkb25seSBpbnB1dDogQmF0Y2hFeGVjdXRlU3RhdGVtZW50Q29tbWFuZElucHV0KSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlc29sdmVNaWRkbGV3YXJlKFxuICAgIGNsaWVudFN0YWNrOiBNaWRkbGV3YXJlU3RhY2s8U2VydmljZUlucHV0VHlwZXMsIFNlcnZpY2VPdXRwdXRUeXBlcz4sXG4gICAgY29uZmlndXJhdGlvbjogRHluYW1vREJEb2N1bWVudENsaWVudFJlc29sdmVkQ29uZmlnLFxuICAgIG9wdGlvbnM/OiBfX0h0dHBIYW5kbGVyT3B0aW9uc1xuICApOiBIYW5kbGVyPEJhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmRJbnB1dCwgQmF0Y2hFeGVjdXRlU3RhdGVtZW50Q29tbWFuZE91dHB1dD4ge1xuICAgIGNvbnN0IHsgbWFyc2hhbGxPcHRpb25zLCB1bm1hcnNoYWxsT3B0aW9ucyB9ID0gY29uZmlndXJhdGlvbi50cmFuc2xhdGVDb25maWcgfHwge307XG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBfX0JhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQobWFyc2hhbGxJbnB1dCh0aGlzLmlucHV0LCB0aGlzLmlucHV0S2V5Tm9kZXMsIG1hcnNoYWxsT3B0aW9ucykpO1xuICAgIGNvbnN0IGhhbmRsZXIgPSBjb21tYW5kLnJlc29sdmVNaWRkbGV3YXJlKGNsaWVudFN0YWNrLCBjb25maWd1cmF0aW9uLCBvcHRpb25zKTtcblxuICAgIHJldHVybiBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgaGFuZGxlcihjb21tYW5kKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmRhdGEsXG4gICAgICAgIG91dHB1dDogdW5tYXJzaGFsbE91dHB1dChkYXRhLm91dHB1dCwgdGhpcy5vdXRwdXRLZXlOb2RlcywgdW5tYXJzaGFsbE9wdGlvbnMpLFxuICAgICAgfTtcbiAgICB9O1xuICB9XG59XG4iXX0=